[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


[project]
name = "multihead"
authors = [
  { name = "Thomas A Caswell", email = "tcaswell@bnl.gov" },
]
description = "Code to work with example data from APS to prep for HRD"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = []

[project.optional-dependencies]
test = [
  "pytest >=6",
  "pytest-cov >=3",
]
dev = [
  "pytest >=6",
  "pytest-cov >=3",
]
docs = [
  "sphinx>=7.0",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "furo>=2023.08.17",
]

[project.urls]
Homepage = "https://github.com/tacaswell/multihead"
"Bug Tracker" = "https://github.com/tacaswell/multihead/issues"
Discussions = "https://github.com/tacaswell/multihead/discussions"
Changelog = "https://github.com/tacaswell/multihead/releases"


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/multihead/_version.py"

[tool.hatch.envs.default]
features = ["test"]
scripts.test = "pytest {args}"


[tool.uv]
dev-dependencies = [
  "multihead[test]",
]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["multihead"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.12"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

exclude = [
    "mda\\.py$",
    "_xdrlib\\.py$",
 ]

disable_error_code = ["import-untyped", "no-untyped-call"]



[[tool.mypy.overrides]]
module = "multihead.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
extend-exclude = ["src/multihead/_xdrlib.py"]

[tool.ruff.lint]

extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long, trust the formatter to get it right
  "ISC001", # implicit concat, can be handy

  # QA for wrong opinions
  "E741",   # allow l as variable name
  "ICN001", # allow verbose numpy
  "RET504", # can use a 'redundent' local if you want
  "RET505", # return in else (clearer with the `else`)
  "SIM105", # contextlib.suppress rather than try...except (just use language)
  "SIM108", # ternaries are not actually clearer (just fewer lines)
  "PTH123", # Path.open vs open (using the builtin is fine)
  "PIE804", # creating dict to ** it is fine
  "C408",   # using dict() is fine
  "NPY002", # allow the old numpy random generator
  "PD901",  # df is a fine variable name
  "EM102",  # use an fstring in an exception if you want
  "EM101",  # use strings in exceptions if you want
  "T20",    # Removes print statements
  "UP031",  # % formats are fine
  "PTH113",
  "SIM114",
  "SIM115",
  "SIM102"
]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]


# Uncomment if using a _compat.typing backport
# typing-modules = ["multihead._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]
